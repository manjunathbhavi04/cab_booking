# dependencies
jpa
mysql driver
lombok
spring web

# Enums are by default int
when we a enum as a attribute in an entity that attribute is stored as a integer in the mysql database
so we have to manually set the datatype by @Enumerated(value = EnumType.STRING) above the enum attribute in the entity class

# foreign keys
foreign keys are always created at many means
customer to booking has a cardinality of one to many where one customer can have many bookings so the foreign key
is created at booking table as customer_id

# cardinalities for entities
customer and booking one to many
driver and booking one to many
driver to cab one to one

# application.properties default code
spring.datasource.url = jpa:mysql://localhost:8080/db_name
spring.datasource.username = root
spring.datasource.password = root@123
spring.jpa.hibernate.ddl-auto = update, create, none, or create-drop or any ddl
update -> the data is saved even after the application is shutdown and run again
create -> drop and creates the table when the application is shutdown and re run
create-drop -> the moment we shutdown the application all the tables and data is dropped no need to re start the app
none -> none is use din production when we use none we can only add data to the table, creation of table and everything is done manually through sql queries

# why use interface instead of class for repository
we create a interface for entity repository because interface can inherit a interface but a class can only implement a interfcae this means
that if we use a class then we have to implement the methods in JpaRepository

# to get a single customer form the database
jpa can be used to get a single customer based on the id but the problem is when we try to return a customer from the method
this will give us error because in jpa it thinks that there can be multiple customer with same id so the return type of the
method should be Optional<Customer>
REASON -> the reason Spring Data JPA returns an Optional<Customer> when you use findById() is due to the fact that the customer with a specific ID might not exist in the database.
The Optional type is a container that can either hold a non-null value (the customer) or be empty (if no customer with that ID exists). This allows you to handle the case where the customer
might not be found without causing a NullPointerException. So, instead of returning just a Customer object, the method returns Optional<Customer>, and you can unwrap it to get the actual
Customer or handle the case where it's empty (no customer found).